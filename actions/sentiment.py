from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet
import spacy

nlp = spacy.load("ru_core_news_lg")

class ActionAnalyzeSentiment(Action):
    def name(self) -> Text:
        return "action_analyze_sentiment"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict) -> List[Dict[Text, Any]]:
        message = tracker.latest_message.get("text")
        doc = nlp(message)

        positive_words = {'—Ö–æ—Ä–æ—à–∏–π', '—Ä–∞–¥–æ—Å—Ç–Ω—ã–π', '–≤–µ—Å–µ–ª—ã–π', '–æ—Ç–ª–∏—á–Ω—ã–π', '–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π'}
        negative_words = {'–ø–ª–æ—Ö–æ–π', '–≥—Ä—É—Å—Ç–Ω—ã–π', '—É–∂–∞—Å–Ω—ã–π', '–ø–µ—á–∞–ª—å–Ω—ã–π', '–ø–ª–æ—Ö–æ'}

        sentiment = "neutral"
        for token in doc:
            lemma = token.lemma_.lower()
            if lemma in positive_words:
                sentiment = "positive"
                break
            elif lemma in negative_words:
                sentiment = "negative"
                break

        if sentiment == "positive":
            dispatcher.utter_message(text="üòä –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!")
        elif sentiment == "negative":
            dispatcher.utter_message(text="üòî –ú–Ω–µ –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å... –•–æ—Ç–∏—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É?")
            dispatcher.utter_message(text="–ù–∞–ø–∏—à–∏—Ç–µ '–∞–Ω–µ–∫–¥–æ—Ç' –∏–ª–∏ '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å'.")
        else:
            dispatcher.utter_message(text="ü§î –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

        return [SlotSet("mood", sentiment)]